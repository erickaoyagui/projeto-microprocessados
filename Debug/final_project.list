
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001528  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001634  08001634  00011634  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800165c  0800165c  0001165c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001660  08001660  00011660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000090  2000000c  08001670  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000009c  08001670  0002009c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f5be  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002406  00000000  00000000  0002f5f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a8b  00000000  00000000  000319f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006c8  00000000  00000000  00035488  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000898  00000000  00000000  00035b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000464a  00000000  00000000  000363e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002850  00000000  00000000  0003aa32  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003d282  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000011b8  00000000  00000000  0003d300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800161c 	.word	0x0800161c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800161c 	.word	0x0800161c

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fa2c 	bl	80005c0 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f9e2 	bl	8000540 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f9bb 	bl	800051c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f902 	bl	80013b4 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_ADC_ConvCpltCallback>:
 80001dc:	4770      	bx	lr

080001de <HAL_ADC_LevelOutOfWindowCallback>:
 80001de:	4770      	bx	lr

080001e0 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80001e0:	6803      	ldr	r3, [r0, #0]
{
 80001e2:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80001e4:	685a      	ldr	r2, [r3, #4]
{
 80001e6:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80001e8:	0690      	lsls	r0, r2, #26
 80001ea:	d527      	bpl.n	800023c <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	0791      	lsls	r1, r2, #30
 80001f0:	d524      	bpl.n	800023c <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80001f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80001f4:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80001f6:	bf5e      	ittt	pl
 80001f8:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80001fa:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80001fe:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000200:	689a      	ldr	r2, [r3, #8]
 8000202:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000206:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800020a:	d110      	bne.n	800022e <HAL_ADC_IRQHandler+0x4e>
 800020c:	68e2      	ldr	r2, [r4, #12]
 800020e:	b972      	cbnz	r2, 800022e <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000210:	685a      	ldr	r2, [r3, #4]
 8000212:	f022 0220 	bic.w	r2, r2, #32
 8000216:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000218:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800021a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800021e:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000220:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000222:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000224:	bf5e      	ittt	pl
 8000226:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000228:	f043 0301 	orrpl.w	r3, r3, #1
 800022c:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 800022e:	4620      	mov	r0, r4
 8000230:	f7ff ffd4 	bl	80001dc <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000234:	f06f 0212 	mvn.w	r2, #18
 8000238:	6823      	ldr	r3, [r4, #0]
 800023a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800023c:	6823      	ldr	r3, [r4, #0]
 800023e:	685a      	ldr	r2, [r3, #4]
 8000240:	0610      	lsls	r0, r2, #24
 8000242:	d530      	bpl.n	80002a6 <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	0751      	lsls	r1, r2, #29
 8000248:	d52d      	bpl.n	80002a6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800024a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800024c:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800024e:	bf5e      	ittt	pl
 8000250:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000252:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000256:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000258:	689a      	ldr	r2, [r3, #8]
 800025a:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800025e:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000262:	d00a      	beq.n	800027a <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000264:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000266:	0550      	lsls	r0, r2, #21
 8000268:	d416      	bmi.n	8000298 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800026a:	689a      	ldr	r2, [r3, #8]
 800026c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000270:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000274:	d110      	bne.n	8000298 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000276:	68e2      	ldr	r2, [r4, #12]
 8000278:	b972      	cbnz	r2, 8000298 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800027a:	685a      	ldr	r2, [r3, #4]
 800027c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000280:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000288:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800028a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800028c:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800028e:	bf5e      	ittt	pl
 8000290:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000292:	f043 0301 	orrpl.w	r3, r3, #1
 8000296:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000298:	4620      	mov	r0, r4
 800029a:	f000 f93d 	bl	8000518 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800029e:	f06f 020c 	mvn.w	r2, #12
 80002a2:	6823      	ldr	r3, [r4, #0]
 80002a4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80002a6:	6823      	ldr	r3, [r4, #0]
 80002a8:	685a      	ldr	r2, [r3, #4]
 80002aa:	0652      	lsls	r2, r2, #25
 80002ac:	d50d      	bpl.n	80002ca <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	07db      	lsls	r3, r3, #31
 80002b2:	d50a      	bpl.n	80002ca <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80002b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80002b6:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80002b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002bc:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80002be:	f7ff ff8e 	bl	80001de <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80002c2:	f06f 0201 	mvn.w	r2, #1
 80002c6:	6823      	ldr	r3, [r4, #0]
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	bd10      	pop	{r4, pc}

080002cc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80002cc:	2300      	movs	r3, #0
{ 
 80002ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80002d0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80002d2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d074      	beq.n	80003c4 <HAL_ADC_ConfigChannel+0xf8>
 80002da:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80002dc:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80002de:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80002e2:	2d06      	cmp	r5, #6
 80002e4:	6802      	ldr	r2, [r0, #0]
 80002e6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80002ea:	680c      	ldr	r4, [r1, #0]
 80002ec:	d825      	bhi.n	800033a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80002ee:	442b      	add	r3, r5
 80002f0:	251f      	movs	r5, #31
 80002f2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80002f4:	3b05      	subs	r3, #5
 80002f6:	409d      	lsls	r5, r3
 80002f8:	ea26 0505 	bic.w	r5, r6, r5
 80002fc:	fa04 f303 	lsl.w	r3, r4, r3
 8000300:	432b      	orrs	r3, r5
 8000302:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000304:	2c09      	cmp	r4, #9
 8000306:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800030a:	688d      	ldr	r5, [r1, #8]
 800030c:	d92f      	bls.n	800036e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800030e:	2607      	movs	r6, #7
 8000310:	4423      	add	r3, r4
 8000312:	68d1      	ldr	r1, [r2, #12]
 8000314:	3b1e      	subs	r3, #30
 8000316:	409e      	lsls	r6, r3
 8000318:	ea21 0106 	bic.w	r1, r1, r6
 800031c:	fa05 f303 	lsl.w	r3, r5, r3
 8000320:	430b      	orrs	r3, r1
 8000322:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000324:	f1a4 0310 	sub.w	r3, r4, #16
 8000328:	2b01      	cmp	r3, #1
 800032a:	d92b      	bls.n	8000384 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800032c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800032e:	2200      	movs	r2, #0
 8000330:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000334:	4618      	mov	r0, r3
 8000336:	b002      	add	sp, #8
 8000338:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800033a:	2d0c      	cmp	r5, #12
 800033c:	d80b      	bhi.n	8000356 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800033e:	442b      	add	r3, r5
 8000340:	251f      	movs	r5, #31
 8000342:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000344:	3b23      	subs	r3, #35	; 0x23
 8000346:	409d      	lsls	r5, r3
 8000348:	ea26 0505 	bic.w	r5, r6, r5
 800034c:	fa04 f303 	lsl.w	r3, r4, r3
 8000350:	432b      	orrs	r3, r5
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
 8000354:	e7d6      	b.n	8000304 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000356:	442b      	add	r3, r5
 8000358:	251f      	movs	r5, #31
 800035a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800035c:	3b41      	subs	r3, #65	; 0x41
 800035e:	409d      	lsls	r5, r3
 8000360:	ea26 0505 	bic.w	r5, r6, r5
 8000364:	fa04 f303 	lsl.w	r3, r4, r3
 8000368:	432b      	orrs	r3, r5
 800036a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800036c:	e7ca      	b.n	8000304 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800036e:	2607      	movs	r6, #7
 8000370:	6911      	ldr	r1, [r2, #16]
 8000372:	4423      	add	r3, r4
 8000374:	409e      	lsls	r6, r3
 8000376:	ea21 0106 	bic.w	r1, r1, r6
 800037a:	fa05 f303 	lsl.w	r3, r5, r3
 800037e:	430b      	orrs	r3, r1
 8000380:	6113      	str	r3, [r2, #16]
 8000382:	e7cf      	b.n	8000324 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <HAL_ADC_ConfigChannel+0xfc>)
 8000386:	429a      	cmp	r2, r3
 8000388:	d116      	bne.n	80003b8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800038a:	6893      	ldr	r3, [r2, #8]
 800038c:	021b      	lsls	r3, r3, #8
 800038e:	d4cd      	bmi.n	800032c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000390:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000392:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000398:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800039a:	d1c7      	bne.n	800032c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <HAL_ADC_ConfigChannel+0x100>)
 800039e:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <HAL_ADC_ConfigChannel+0x104>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80003a6:	230a      	movs	r3, #10
 80003a8:	4353      	muls	r3, r2
            wait_loop_index--;
 80003aa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80003ac:	9b01      	ldr	r3, [sp, #4]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0bc      	beq.n	800032c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80003b2:	9b01      	ldr	r3, [sp, #4]
 80003b4:	3b01      	subs	r3, #1
 80003b6:	e7f8      	b.n	80003aa <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80003c0:	2301      	movs	r3, #1
 80003c2:	e7b4      	b.n	800032e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80003c4:	2302      	movs	r3, #2
 80003c6:	e7b5      	b.n	8000334 <HAL_ADC_ConfigChannel+0x68>
 80003c8:	40012400 	.word	0x40012400
 80003cc:	20000008 	.word	0x20000008
 80003d0:	000f4240 	.word	0x000f4240

080003d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80003d4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80003d6:	6803      	ldr	r3, [r0, #0]
{
 80003d8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80003da:	689a      	ldr	r2, [r3, #8]
 80003dc:	07d2      	lsls	r2, r2, #31
 80003de:	d401      	bmi.n	80003e4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80003e0:	2000      	movs	r0, #0
 80003e2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80003e4:	689a      	ldr	r2, [r3, #8]
 80003e6:	f022 0201 	bic.w	r2, r2, #1
 80003ea:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80003ec:	f7ff fef0 	bl	80001d0 <HAL_GetTick>
 80003f0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80003f2:	6823      	ldr	r3, [r4, #0]
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	07db      	lsls	r3, r3, #31
 80003f8:	d5f2      	bpl.n	80003e0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80003fa:	f7ff fee9 	bl	80001d0 <HAL_GetTick>
 80003fe:	1b40      	subs	r0, r0, r5
 8000400:	2802      	cmp	r0, #2
 8000402:	d9f6      	bls.n	80003f2 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000404:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000406:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000408:	f043 0310 	orr.w	r3, r3, #16
 800040c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800040e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000416:	bd38      	pop	{r3, r4, r5, pc}

08000418 <HAL_ADC_Init>:
{
 8000418:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800041a:	4604      	mov	r4, r0
 800041c:	2800      	cmp	r0, #0
 800041e:	d071      	beq.n	8000504 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000420:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000422:	b923      	cbnz	r3, 800042e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000424:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000426:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800042a:	f000 ffe5 	bl	80013f8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800042e:	4620      	mov	r0, r4
 8000430:	f7ff ffd0 	bl	80003d4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000434:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000436:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800043a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800043c:	d164      	bne.n	8000508 <HAL_ADC_Init+0xf0>
 800043e:	2800      	cmp	r0, #0
 8000440:	d162      	bne.n	8000508 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000442:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000444:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000448:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800044a:	f023 0302 	bic.w	r3, r3, #2
 800044e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000452:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000454:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000456:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000458:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800045a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800045e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000462:	d038      	beq.n	80004d6 <HAL_ADC_Init+0xbe>
 8000464:	2901      	cmp	r1, #1
 8000466:	bf14      	ite	ne
 8000468:	4606      	movne	r6, r0
 800046a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800046e:	6965      	ldr	r5, [r4, #20]
 8000470:	2d01      	cmp	r5, #1
 8000472:	d107      	bne.n	8000484 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000474:	2b00      	cmp	r3, #0
 8000476:	d130      	bne.n	80004da <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000478:	69a3      	ldr	r3, [r4, #24]
 800047a:	3b01      	subs	r3, #1
 800047c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000480:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000484:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000486:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800048a:	685d      	ldr	r5, [r3, #4]
 800048c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000490:	ea45 0506 	orr.w	r5, r5, r6
 8000494:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000496:	689e      	ldr	r6, [r3, #8]
 8000498:	4d1d      	ldr	r5, [pc, #116]	; (8000510 <HAL_ADC_Init+0xf8>)
 800049a:	ea05 0506 	and.w	r5, r5, r6
 800049e:	ea45 0502 	orr.w	r5, r5, r2
 80004a2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80004a4:	d001      	beq.n	80004aa <HAL_ADC_Init+0x92>
 80004a6:	2901      	cmp	r1, #1
 80004a8:	d120      	bne.n	80004ec <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80004aa:	6921      	ldr	r1, [r4, #16]
 80004ac:	3901      	subs	r1, #1
 80004ae:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80004b0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80004b2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80004b6:	4329      	orrs	r1, r5
 80004b8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80004ba:	6899      	ldr	r1, [r3, #8]
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <HAL_ADC_Init+0xfc>)
 80004be:	400b      	ands	r3, r1
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d115      	bne.n	80004f0 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80004c4:	2300      	movs	r3, #0
 80004c6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80004c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004ca:	f023 0303 	bic.w	r3, r3, #3
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80004d6:	460e      	mov	r6, r1
 80004d8:	e7c9      	b.n	800046e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004dc:	f043 0320 	orr.w	r3, r3, #32
 80004e0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004ea:	e7cb      	b.n	8000484 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80004ec:	2100      	movs	r1, #0
 80004ee:	e7df      	b.n	80004b0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80004f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004f2:	f023 0312 	bic.w	r3, r3, #18
 80004f6:	f043 0310 	orr.w	r3, r3, #16
 80004fa:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000504:	2001      	movs	r0, #1
}
 8000506:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000508:	f043 0310 	orr.w	r3, r3, #16
 800050c:	62a3      	str	r3, [r4, #40]	; 0x28
 800050e:	e7f9      	b.n	8000504 <HAL_ADC_Init+0xec>
 8000510:	ffe1f7fd 	.word	0xffe1f7fd
 8000514:	ff1f0efe 	.word	0xff1f0efe

08000518 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000518:	4770      	bx	lr
	...

0800051c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800051e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000520:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000522:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000526:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800052a:	041b      	lsls	r3, r3, #16
 800052c:	0c1b      	lsrs	r3, r3, #16
 800052e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000536:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000538:	60d3      	str	r3, [r2, #12]
 800053a:	4770      	bx	lr
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	68dc      	ldr	r4, [r3, #12]
 8000546:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800054a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000550:	2b04      	cmp	r3, #4
 8000552:	bf28      	it	cs
 8000554:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000556:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000558:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800055c:	bf98      	it	ls
 800055e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000560:	fa05 f303 	lsl.w	r3, r5, r3
 8000564:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000568:	bf88      	it	hi
 800056a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800056c:	4019      	ands	r1, r3
 800056e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000570:	fa05 f404 	lsl.w	r4, r5, r4
 8000574:	3c01      	subs	r4, #1
 8000576:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000578:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800057a:	ea42 0201 	orr.w	r2, r2, r1
 800057e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000582:	bfaf      	iteee	ge
 8000584:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000588:	4b06      	ldrlt	r3, [pc, #24]	; (80005a4 <HAL_NVIC_SetPriority+0x64>)
 800058a:	f000 000f 	andlt.w	r0, r0, #15
 800058e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000590:	bfa5      	ittet	ge
 8000592:	b2d2      	uxtbge	r2, r2
 8000594:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000598:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800059e:	bd30      	pop	{r4, r5, pc}
 80005a0:	e000ed00 	.word	0xe000ed00
 80005a4:	e000ed14 	.word	0xe000ed14

080005a8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005a8:	2301      	movs	r3, #1
 80005aa:	0942      	lsrs	r2, r0, #5
 80005ac:	f000 001f 	and.w	r0, r0, #31
 80005b0:	fa03 f000 	lsl.w	r0, r3, r0
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <HAL_NVIC_EnableIRQ+0x14>)
 80005b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005ba:	4770      	bx	lr
 80005bc:	e000e100 	.word	0xe000e100

080005c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c0:	3801      	subs	r0, #1
 80005c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005c6:	d20a      	bcs.n	80005de <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005d6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e000e010 	.word	0xe000e010
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80005ec:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80005f0:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d003      	beq.n	80005fe <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80005f6:	2304      	movs	r3, #4
 80005f8:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80005fa:	2001      	movs	r0, #1
 80005fc:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005fe:	6803      	ldr	r3, [r0, #0]
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	f022 020e 	bic.w	r2, r2, #14
 8000606:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	f022 0201 	bic.w	r2, r2, #1
 800060e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000610:	4a18      	ldr	r2, [pc, #96]	; (8000674 <HAL_DMA_Abort_IT+0x88>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d01f      	beq.n	8000656 <HAL_DMA_Abort_IT+0x6a>
 8000616:	3214      	adds	r2, #20
 8000618:	4293      	cmp	r3, r2
 800061a:	d01e      	beq.n	800065a <HAL_DMA_Abort_IT+0x6e>
 800061c:	3214      	adds	r2, #20
 800061e:	4293      	cmp	r3, r2
 8000620:	d01d      	beq.n	800065e <HAL_DMA_Abort_IT+0x72>
 8000622:	3214      	adds	r2, #20
 8000624:	4293      	cmp	r3, r2
 8000626:	d01d      	beq.n	8000664 <HAL_DMA_Abort_IT+0x78>
 8000628:	3214      	adds	r2, #20
 800062a:	4293      	cmp	r3, r2
 800062c:	d01d      	beq.n	800066a <HAL_DMA_Abort_IT+0x7e>
 800062e:	3214      	adds	r2, #20
 8000630:	4293      	cmp	r3, r2
 8000632:	bf0c      	ite	eq
 8000634:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000638:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800063c:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800063e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000640:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000642:	2301      	movs	r3, #1
 8000644:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000648:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800064a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800064e:	b17b      	cbz	r3, 8000670 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000650:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000652:	4620      	mov	r0, r4
 8000654:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000656:	2301      	movs	r3, #1
 8000658:	e7f0      	b.n	800063c <HAL_DMA_Abort_IT+0x50>
 800065a:	2310      	movs	r3, #16
 800065c:	e7ee      	b.n	800063c <HAL_DMA_Abort_IT+0x50>
 800065e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000662:	e7eb      	b.n	800063c <HAL_DMA_Abort_IT+0x50>
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	e7e8      	b.n	800063c <HAL_DMA_Abort_IT+0x50>
 800066a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066e:	e7e5      	b.n	800063c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000670:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000672:	bd10      	pop	{r4, pc}
 8000674:	40020008 	.word	0x40020008
 8000678:	40020000 	.word	0x40020000

0800067c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800067c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000680:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000682:	4616      	mov	r6, r2
 8000684:	4b65      	ldr	r3, [pc, #404]	; (800081c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000686:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800082c <HAL_GPIO_Init+0x1b0>
 800068a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000830 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800068e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000692:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000694:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000698:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800069c:	45a0      	cmp	r8, r4
 800069e:	d17f      	bne.n	80007a0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80006a0:	684d      	ldr	r5, [r1, #4]
 80006a2:	2d12      	cmp	r5, #18
 80006a4:	f000 80af 	beq.w	8000806 <HAL_GPIO_Init+0x18a>
 80006a8:	f200 8088 	bhi.w	80007bc <HAL_GPIO_Init+0x140>
 80006ac:	2d02      	cmp	r5, #2
 80006ae:	f000 80a7 	beq.w	8000800 <HAL_GPIO_Init+0x184>
 80006b2:	d87c      	bhi.n	80007ae <HAL_GPIO_Init+0x132>
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	f000 808e 	beq.w	80007d6 <HAL_GPIO_Init+0x15a>
 80006ba:	2d01      	cmp	r5, #1
 80006bc:	f000 809e 	beq.w	80007fc <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80006c0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006c4:	2cff      	cmp	r4, #255	; 0xff
 80006c6:	bf93      	iteet	ls
 80006c8:	4682      	movls	sl, r0
 80006ca:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80006ce:	3d08      	subhi	r5, #8
 80006d0:	f8d0 b000 	ldrls.w	fp, [r0]
 80006d4:	bf92      	itee	ls
 80006d6:	00b5      	lslls	r5, r6, #2
 80006d8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80006dc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80006de:	fa09 f805 	lsl.w	r8, r9, r5
 80006e2:	ea2b 0808 	bic.w	r8, fp, r8
 80006e6:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006ea:	bf88      	it	hi
 80006ec:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80006f0:	ea48 0505 	orr.w	r5, r8, r5
 80006f4:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006f8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80006fc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000700:	d04e      	beq.n	80007a0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000702:	4d47      	ldr	r5, [pc, #284]	; (8000820 <HAL_GPIO_Init+0x1a4>)
 8000704:	4f46      	ldr	r7, [pc, #280]	; (8000820 <HAL_GPIO_Init+0x1a4>)
 8000706:	69ad      	ldr	r5, [r5, #24]
 8000708:	f026 0803 	bic.w	r8, r6, #3
 800070c:	f045 0501 	orr.w	r5, r5, #1
 8000710:	61bd      	str	r5, [r7, #24]
 8000712:	69bd      	ldr	r5, [r7, #24]
 8000714:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000718:	f005 0501 	and.w	r5, r5, #1
 800071c:	9501      	str	r5, [sp, #4]
 800071e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000722:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000726:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000728:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800072c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000730:	fa09 f90b 	lsl.w	r9, r9, fp
 8000734:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000738:	4d3a      	ldr	r5, [pc, #232]	; (8000824 <HAL_GPIO_Init+0x1a8>)
 800073a:	42a8      	cmp	r0, r5
 800073c:	d068      	beq.n	8000810 <HAL_GPIO_Init+0x194>
 800073e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000742:	42a8      	cmp	r0, r5
 8000744:	d066      	beq.n	8000814 <HAL_GPIO_Init+0x198>
 8000746:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800074a:	42a8      	cmp	r0, r5
 800074c:	d064      	beq.n	8000818 <HAL_GPIO_Init+0x19c>
 800074e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000752:	42a8      	cmp	r0, r5
 8000754:	bf0c      	ite	eq
 8000756:	2503      	moveq	r5, #3
 8000758:	2504      	movne	r5, #4
 800075a:	fa05 f50b 	lsl.w	r5, r5, fp
 800075e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000762:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000766:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000768:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800076c:	bf14      	ite	ne
 800076e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000770:	43a5      	biceq	r5, r4
 8000772:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000774:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000776:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800077a:	bf14      	ite	ne
 800077c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800077e:	43a5      	biceq	r5, r4
 8000780:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000782:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000784:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000788:	bf14      	ite	ne
 800078a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800078c:	43a5      	biceq	r5, r4
 800078e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000790:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000792:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000796:	bf14      	ite	ne
 8000798:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800079a:	ea25 0404 	biceq.w	r4, r5, r4
 800079e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007a0:	3601      	adds	r6, #1
 80007a2:	2e10      	cmp	r6, #16
 80007a4:	f47f af73 	bne.w	800068e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80007a8:	b003      	add	sp, #12
 80007aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80007ae:	2d03      	cmp	r5, #3
 80007b0:	d022      	beq.n	80007f8 <HAL_GPIO_Init+0x17c>
 80007b2:	2d11      	cmp	r5, #17
 80007b4:	d184      	bne.n	80006c0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007b6:	68ca      	ldr	r2, [r1, #12]
 80007b8:	3204      	adds	r2, #4
          break;
 80007ba:	e781      	b.n	80006c0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80007bc:	4f1a      	ldr	r7, [pc, #104]	; (8000828 <HAL_GPIO_Init+0x1ac>)
 80007be:	42bd      	cmp	r5, r7
 80007c0:	d009      	beq.n	80007d6 <HAL_GPIO_Init+0x15a>
 80007c2:	d812      	bhi.n	80007ea <HAL_GPIO_Init+0x16e>
 80007c4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000834 <HAL_GPIO_Init+0x1b8>
 80007c8:	454d      	cmp	r5, r9
 80007ca:	d004      	beq.n	80007d6 <HAL_GPIO_Init+0x15a>
 80007cc:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80007d0:	454d      	cmp	r5, r9
 80007d2:	f47f af75 	bne.w	80006c0 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007d6:	688a      	ldr	r2, [r1, #8]
 80007d8:	b1c2      	cbz	r2, 800080c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007da:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80007dc:	bf0c      	ite	eq
 80007de:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80007e2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007e6:	2208      	movs	r2, #8
 80007e8:	e76a      	b.n	80006c0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80007ea:	4575      	cmp	r5, lr
 80007ec:	d0f3      	beq.n	80007d6 <HAL_GPIO_Init+0x15a>
 80007ee:	4565      	cmp	r5, ip
 80007f0:	d0f1      	beq.n	80007d6 <HAL_GPIO_Init+0x15a>
 80007f2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000838 <HAL_GPIO_Init+0x1bc>
 80007f6:	e7eb      	b.n	80007d0 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007f8:	2200      	movs	r2, #0
 80007fa:	e761      	b.n	80006c0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007fc:	68ca      	ldr	r2, [r1, #12]
          break;
 80007fe:	e75f      	b.n	80006c0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000800:	68ca      	ldr	r2, [r1, #12]
 8000802:	3208      	adds	r2, #8
          break;
 8000804:	e75c      	b.n	80006c0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000806:	68ca      	ldr	r2, [r1, #12]
 8000808:	320c      	adds	r2, #12
          break;
 800080a:	e759      	b.n	80006c0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800080c:	2204      	movs	r2, #4
 800080e:	e757      	b.n	80006c0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000810:	2500      	movs	r5, #0
 8000812:	e7a2      	b.n	800075a <HAL_GPIO_Init+0xde>
 8000814:	2501      	movs	r5, #1
 8000816:	e7a0      	b.n	800075a <HAL_GPIO_Init+0xde>
 8000818:	2502      	movs	r5, #2
 800081a:	e79e      	b.n	800075a <HAL_GPIO_Init+0xde>
 800081c:	40010400 	.word	0x40010400
 8000820:	40021000 	.word	0x40021000
 8000824:	40010800 	.word	0x40010800
 8000828:	10210000 	.word	0x10210000
 800082c:	10310000 	.word	0x10310000
 8000830:	10320000 	.word	0x10320000
 8000834:	10110000 	.word	0x10110000
 8000838:	10220000 	.word	0x10220000

0800083c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800083c:	b10a      	cbz	r2, 8000842 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800083e:	6101      	str	r1, [r0, #16]
 8000840:	4770      	bx	lr
 8000842:	0409      	lsls	r1, r1, #16
 8000844:	e7fb      	b.n	800083e <HAL_GPIO_WritePin+0x2>

08000846 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000846:	4770      	bx	lr

08000848 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000848:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800084c:	6959      	ldr	r1, [r3, #20]
 800084e:	4201      	tst	r1, r0
 8000850:	d002      	beq.n	8000858 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000852:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000854:	f7ff fff7 	bl	8000846 <HAL_GPIO_EXTI_Callback>
 8000858:	bd08      	pop	{r3, pc}
 800085a:	bf00      	nop
 800085c:	40010400 	.word	0x40010400

08000860 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000860:	6803      	ldr	r3, [r0, #0]
{
 8000862:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000866:	07db      	lsls	r3, r3, #31
{
 8000868:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800086a:	d410      	bmi.n	800088e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800086c:	682b      	ldr	r3, [r5, #0]
 800086e:	079f      	lsls	r7, r3, #30
 8000870:	d45e      	bmi.n	8000930 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000872:	682b      	ldr	r3, [r5, #0]
 8000874:	0719      	lsls	r1, r3, #28
 8000876:	f100 8095 	bmi.w	80009a4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800087a:	682b      	ldr	r3, [r5, #0]
 800087c:	075a      	lsls	r2, r3, #29
 800087e:	f100 80bf 	bmi.w	8000a00 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000882:	69ea      	ldr	r2, [r5, #28]
 8000884:	2a00      	cmp	r2, #0
 8000886:	f040 812d 	bne.w	8000ae4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800088a:	2000      	movs	r0, #0
 800088c:	e014      	b.n	80008b8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800088e:	4c90      	ldr	r4, [pc, #576]	; (8000ad0 <HAL_RCC_OscConfig+0x270>)
 8000890:	6863      	ldr	r3, [r4, #4]
 8000892:	f003 030c 	and.w	r3, r3, #12
 8000896:	2b04      	cmp	r3, #4
 8000898:	d007      	beq.n	80008aa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800089a:	6863      	ldr	r3, [r4, #4]
 800089c:	f003 030c 	and.w	r3, r3, #12
 80008a0:	2b08      	cmp	r3, #8
 80008a2:	d10c      	bne.n	80008be <HAL_RCC_OscConfig+0x5e>
 80008a4:	6863      	ldr	r3, [r4, #4]
 80008a6:	03de      	lsls	r6, r3, #15
 80008a8:	d509      	bpl.n	80008be <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	039c      	lsls	r4, r3, #14
 80008ae:	d5dd      	bpl.n	800086c <HAL_RCC_OscConfig+0xc>
 80008b0:	686b      	ldr	r3, [r5, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1da      	bne.n	800086c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80008b6:	2001      	movs	r0, #1
}
 80008b8:	b002      	add	sp, #8
 80008ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008be:	686b      	ldr	r3, [r5, #4]
 80008c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c4:	d110      	bne.n	80008e8 <HAL_RCC_OscConfig+0x88>
 80008c6:	6823      	ldr	r3, [r4, #0]
 80008c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008ce:	f7ff fc7f 	bl	80001d0 <HAL_GetTick>
 80008d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	0398      	lsls	r0, r3, #14
 80008d8:	d4c8      	bmi.n	800086c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008da:	f7ff fc79 	bl	80001d0 <HAL_GetTick>
 80008de:	1b80      	subs	r0, r0, r6
 80008e0:	2864      	cmp	r0, #100	; 0x64
 80008e2:	d9f7      	bls.n	80008d4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80008e4:	2003      	movs	r0, #3
 80008e6:	e7e7      	b.n	80008b8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e8:	b99b      	cbnz	r3, 8000912 <HAL_RCC_OscConfig+0xb2>
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008f0:	6023      	str	r3, [r4, #0]
 80008f2:	6823      	ldr	r3, [r4, #0]
 80008f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008fa:	f7ff fc69 	bl	80001d0 <HAL_GetTick>
 80008fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000900:	6823      	ldr	r3, [r4, #0]
 8000902:	0399      	lsls	r1, r3, #14
 8000904:	d5b2      	bpl.n	800086c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000906:	f7ff fc63 	bl	80001d0 <HAL_GetTick>
 800090a:	1b80      	subs	r0, r0, r6
 800090c:	2864      	cmp	r0, #100	; 0x64
 800090e:	d9f7      	bls.n	8000900 <HAL_RCC_OscConfig+0xa0>
 8000910:	e7e8      	b.n	80008e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000912:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000916:	6823      	ldr	r3, [r4, #0]
 8000918:	d103      	bne.n	8000922 <HAL_RCC_OscConfig+0xc2>
 800091a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800091e:	6023      	str	r3, [r4, #0]
 8000920:	e7d1      	b.n	80008c6 <HAL_RCC_OscConfig+0x66>
 8000922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000926:	6023      	str	r3, [r4, #0]
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800092e:	e7cd      	b.n	80008cc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000930:	4c67      	ldr	r4, [pc, #412]	; (8000ad0 <HAL_RCC_OscConfig+0x270>)
 8000932:	6863      	ldr	r3, [r4, #4]
 8000934:	f013 0f0c 	tst.w	r3, #12
 8000938:	d007      	beq.n	800094a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800093a:	6863      	ldr	r3, [r4, #4]
 800093c:	f003 030c 	and.w	r3, r3, #12
 8000940:	2b08      	cmp	r3, #8
 8000942:	d110      	bne.n	8000966 <HAL_RCC_OscConfig+0x106>
 8000944:	6863      	ldr	r3, [r4, #4]
 8000946:	03da      	lsls	r2, r3, #15
 8000948:	d40d      	bmi.n	8000966 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	079b      	lsls	r3, r3, #30
 800094e:	d502      	bpl.n	8000956 <HAL_RCC_OscConfig+0xf6>
 8000950:	692b      	ldr	r3, [r5, #16]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d1af      	bne.n	80008b6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	696a      	ldr	r2, [r5, #20]
 800095a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800095e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000962:	6023      	str	r3, [r4, #0]
 8000964:	e785      	b.n	8000872 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000966:	692a      	ldr	r2, [r5, #16]
 8000968:	4b5a      	ldr	r3, [pc, #360]	; (8000ad4 <HAL_RCC_OscConfig+0x274>)
 800096a:	b16a      	cbz	r2, 8000988 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800096c:	2201      	movs	r2, #1
 800096e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000970:	f7ff fc2e 	bl	80001d0 <HAL_GetTick>
 8000974:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	079f      	lsls	r7, r3, #30
 800097a:	d4ec      	bmi.n	8000956 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800097c:	f7ff fc28 	bl	80001d0 <HAL_GetTick>
 8000980:	1b80      	subs	r0, r0, r6
 8000982:	2802      	cmp	r0, #2
 8000984:	d9f7      	bls.n	8000976 <HAL_RCC_OscConfig+0x116>
 8000986:	e7ad      	b.n	80008e4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000988:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800098a:	f7ff fc21 	bl	80001d0 <HAL_GetTick>
 800098e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	0798      	lsls	r0, r3, #30
 8000994:	f57f af6d 	bpl.w	8000872 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000998:	f7ff fc1a 	bl	80001d0 <HAL_GetTick>
 800099c:	1b80      	subs	r0, r0, r6
 800099e:	2802      	cmp	r0, #2
 80009a0:	d9f6      	bls.n	8000990 <HAL_RCC_OscConfig+0x130>
 80009a2:	e79f      	b.n	80008e4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009a4:	69aa      	ldr	r2, [r5, #24]
 80009a6:	4c4a      	ldr	r4, [pc, #296]	; (8000ad0 <HAL_RCC_OscConfig+0x270>)
 80009a8:	4b4b      	ldr	r3, [pc, #300]	; (8000ad8 <HAL_RCC_OscConfig+0x278>)
 80009aa:	b1da      	cbz	r2, 80009e4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009b0:	f7ff fc0e 	bl	80001d0 <HAL_GetTick>
 80009b4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009b8:	079b      	lsls	r3, r3, #30
 80009ba:	d50d      	bpl.n	80009d8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80009bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80009c0:	4b46      	ldr	r3, [pc, #280]	; (8000adc <HAL_RCC_OscConfig+0x27c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80009c8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80009ca:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80009cc:	9b01      	ldr	r3, [sp, #4]
 80009ce:	1e5a      	subs	r2, r3, #1
 80009d0:	9201      	str	r2, [sp, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d1f9      	bne.n	80009ca <HAL_RCC_OscConfig+0x16a>
 80009d6:	e750      	b.n	800087a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009d8:	f7ff fbfa 	bl	80001d0 <HAL_GetTick>
 80009dc:	1b80      	subs	r0, r0, r6
 80009de:	2802      	cmp	r0, #2
 80009e0:	d9e9      	bls.n	80009b6 <HAL_RCC_OscConfig+0x156>
 80009e2:	e77f      	b.n	80008e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80009e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009e6:	f7ff fbf3 	bl	80001d0 <HAL_GetTick>
 80009ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009ee:	079f      	lsls	r7, r3, #30
 80009f0:	f57f af43 	bpl.w	800087a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f4:	f7ff fbec 	bl	80001d0 <HAL_GetTick>
 80009f8:	1b80      	subs	r0, r0, r6
 80009fa:	2802      	cmp	r0, #2
 80009fc:	d9f6      	bls.n	80009ec <HAL_RCC_OscConfig+0x18c>
 80009fe:	e771      	b.n	80008e4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a00:	4c33      	ldr	r4, [pc, #204]	; (8000ad0 <HAL_RCC_OscConfig+0x270>)
 8000a02:	69e3      	ldr	r3, [r4, #28]
 8000a04:	00d8      	lsls	r0, r3, #3
 8000a06:	d424      	bmi.n	8000a52 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000a08:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	69e3      	ldr	r3, [r4, #28]
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	61e3      	str	r3, [r4, #28]
 8000a12:	69e3      	ldr	r3, [r4, #28]
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a1c:	4e30      	ldr	r6, [pc, #192]	; (8000ae0 <HAL_RCC_OscConfig+0x280>)
 8000a1e:	6833      	ldr	r3, [r6, #0]
 8000a20:	05d9      	lsls	r1, r3, #23
 8000a22:	d518      	bpl.n	8000a56 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a24:	68eb      	ldr	r3, [r5, #12]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d126      	bne.n	8000a78 <HAL_RCC_OscConfig+0x218>
 8000a2a:	6a23      	ldr	r3, [r4, #32]
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a32:	f7ff fbcd 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a36:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a3a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a3c:	6a23      	ldr	r3, [r4, #32]
 8000a3e:	079b      	lsls	r3, r3, #30
 8000a40:	d53f      	bpl.n	8000ac2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000a42:	2f00      	cmp	r7, #0
 8000a44:	f43f af1d 	beq.w	8000882 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a48:	69e3      	ldr	r3, [r4, #28]
 8000a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	61e3      	str	r3, [r4, #28]
 8000a50:	e717      	b.n	8000882 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000a52:	2700      	movs	r7, #0
 8000a54:	e7e2      	b.n	8000a1c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a56:	6833      	ldr	r3, [r6, #0]
 8000a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a5e:	f7ff fbb7 	bl	80001d0 <HAL_GetTick>
 8000a62:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a64:	6833      	ldr	r3, [r6, #0]
 8000a66:	05da      	lsls	r2, r3, #23
 8000a68:	d4dc      	bmi.n	8000a24 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a6a:	f7ff fbb1 	bl	80001d0 <HAL_GetTick>
 8000a6e:	eba0 0008 	sub.w	r0, r0, r8
 8000a72:	2864      	cmp	r0, #100	; 0x64
 8000a74:	d9f6      	bls.n	8000a64 <HAL_RCC_OscConfig+0x204>
 8000a76:	e735      	b.n	80008e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a78:	b9ab      	cbnz	r3, 8000aa6 <HAL_RCC_OscConfig+0x246>
 8000a7a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a7c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a80:	f023 0301 	bic.w	r3, r3, #1
 8000a84:	6223      	str	r3, [r4, #32]
 8000a86:	6a23      	ldr	r3, [r4, #32]
 8000a88:	f023 0304 	bic.w	r3, r3, #4
 8000a8c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a8e:	f7ff fb9f 	bl	80001d0 <HAL_GetTick>
 8000a92:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a94:	6a23      	ldr	r3, [r4, #32]
 8000a96:	0798      	lsls	r0, r3, #30
 8000a98:	d5d3      	bpl.n	8000a42 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a9a:	f7ff fb99 	bl	80001d0 <HAL_GetTick>
 8000a9e:	1b80      	subs	r0, r0, r6
 8000aa0:	4540      	cmp	r0, r8
 8000aa2:	d9f7      	bls.n	8000a94 <HAL_RCC_OscConfig+0x234>
 8000aa4:	e71e      	b.n	80008e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa6:	2b05      	cmp	r3, #5
 8000aa8:	6a23      	ldr	r3, [r4, #32]
 8000aaa:	d103      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x254>
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	6223      	str	r3, [r4, #32]
 8000ab2:	e7ba      	b.n	8000a2a <HAL_RCC_OscConfig+0x1ca>
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	6223      	str	r3, [r4, #32]
 8000aba:	6a23      	ldr	r3, [r4, #32]
 8000abc:	f023 0304 	bic.w	r3, r3, #4
 8000ac0:	e7b6      	b.n	8000a30 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac2:	f7ff fb85 	bl	80001d0 <HAL_GetTick>
 8000ac6:	eba0 0008 	sub.w	r0, r0, r8
 8000aca:	42b0      	cmp	r0, r6
 8000acc:	d9b6      	bls.n	8000a3c <HAL_RCC_OscConfig+0x1dc>
 8000ace:	e709      	b.n	80008e4 <HAL_RCC_OscConfig+0x84>
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	42420000 	.word	0x42420000
 8000ad8:	42420480 	.word	0x42420480
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ae4:	4c22      	ldr	r4, [pc, #136]	; (8000b70 <HAL_RCC_OscConfig+0x310>)
 8000ae6:	6863      	ldr	r3, [r4, #4]
 8000ae8:	f003 030c 	and.w	r3, r3, #12
 8000aec:	2b08      	cmp	r3, #8
 8000aee:	f43f aee2 	beq.w	80008b6 <HAL_RCC_OscConfig+0x56>
 8000af2:	2300      	movs	r3, #0
 8000af4:	4e1f      	ldr	r6, [pc, #124]	; (8000b74 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000af6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000af8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000afa:	d12b      	bne.n	8000b54 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000afc:	f7ff fb68 	bl	80001d0 <HAL_GetTick>
 8000b00:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b02:	6823      	ldr	r3, [r4, #0]
 8000b04:	0199      	lsls	r1, r3, #6
 8000b06:	d41f      	bmi.n	8000b48 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b08:	6a2b      	ldr	r3, [r5, #32]
 8000b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b0e:	d105      	bne.n	8000b1c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b10:	6862      	ldr	r2, [r4, #4]
 8000b12:	68a9      	ldr	r1, [r5, #8]
 8000b14:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b1c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000b1e:	6862      	ldr	r2, [r4, #4]
 8000b20:	430b      	orrs	r3, r1
 8000b22:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000b26:	4313      	orrs	r3, r2
 8000b28:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b2e:	f7ff fb4f 	bl	80001d0 <HAL_GetTick>
 8000b32:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	019a      	lsls	r2, r3, #6
 8000b38:	f53f aea7 	bmi.w	800088a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b3c:	f7ff fb48 	bl	80001d0 <HAL_GetTick>
 8000b40:	1b40      	subs	r0, r0, r5
 8000b42:	2802      	cmp	r0, #2
 8000b44:	d9f6      	bls.n	8000b34 <HAL_RCC_OscConfig+0x2d4>
 8000b46:	e6cd      	b.n	80008e4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b48:	f7ff fb42 	bl	80001d0 <HAL_GetTick>
 8000b4c:	1bc0      	subs	r0, r0, r7
 8000b4e:	2802      	cmp	r0, #2
 8000b50:	d9d7      	bls.n	8000b02 <HAL_RCC_OscConfig+0x2a2>
 8000b52:	e6c7      	b.n	80008e4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000b54:	f7ff fb3c 	bl	80001d0 <HAL_GetTick>
 8000b58:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	019b      	lsls	r3, r3, #6
 8000b5e:	f57f ae94 	bpl.w	800088a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b62:	f7ff fb35 	bl	80001d0 <HAL_GetTick>
 8000b66:	1b40      	subs	r0, r0, r5
 8000b68:	2802      	cmp	r0, #2
 8000b6a:	d9f6      	bls.n	8000b5a <HAL_RCC_OscConfig+0x2fa>
 8000b6c:	e6ba      	b.n	80008e4 <HAL_RCC_OscConfig+0x84>
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000
 8000b74:	42420060 	.word	0x42420060

08000b78 <HAL_RCC_GetSysClockFreq>:
{
 8000b78:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000b7c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b7e:	ac02      	add	r4, sp, #8
 8000b80:	f103 0510 	add.w	r5, r3, #16
 8000b84:	4622      	mov	r2, r4
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	6859      	ldr	r1, [r3, #4]
 8000b8a:	3308      	adds	r3, #8
 8000b8c:	c203      	stmia	r2!, {r0, r1}
 8000b8e:	42ab      	cmp	r3, r5
 8000b90:	4614      	mov	r4, r2
 8000b92:	d1f7      	bne.n	8000b84 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b94:	2301      	movs	r3, #1
 8000b96:	f88d 3004 	strb.w	r3, [sp, #4]
 8000b9a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000b9c:	4911      	ldr	r1, [pc, #68]	; (8000be4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b9e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000ba2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000ba4:	f003 020c 	and.w	r2, r3, #12
 8000ba8:	2a08      	cmp	r2, #8
 8000baa:	d117      	bne.n	8000bdc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000bac:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000bb0:	a806      	add	r0, sp, #24
 8000bb2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000bb4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000bb6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000bba:	d50c      	bpl.n	8000bd6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000bbc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000bbe:	480a      	ldr	r0, [pc, #40]	; (8000be8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000bc0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000bc4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000bc6:	aa06      	add	r2, sp, #24
 8000bc8:	4413      	add	r3, r2
 8000bca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000bce:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000bd2:	b007      	add	sp, #28
 8000bd4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_RCC_GetSysClockFreq+0x74>)
 8000bd8:	4350      	muls	r0, r2
 8000bda:	e7fa      	b.n	8000bd2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000bde:	e7f8      	b.n	8000bd2 <HAL_RCC_GetSysClockFreq+0x5a>
 8000be0:	08001634 	.word	0x08001634
 8000be4:	40021000 	.word	0x40021000
 8000be8:	007a1200 	.word	0x007a1200
 8000bec:	003d0900 	.word	0x003d0900

08000bf0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bf0:	4a54      	ldr	r2, [pc, #336]	; (8000d44 <HAL_RCC_ClockConfig+0x154>)
{
 8000bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bf6:	6813      	ldr	r3, [r2, #0]
{
 8000bf8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	428b      	cmp	r3, r1
{
 8000c00:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c02:	d32a      	bcc.n	8000c5a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c04:	6829      	ldr	r1, [r5, #0]
 8000c06:	078c      	lsls	r4, r1, #30
 8000c08:	d434      	bmi.n	8000c74 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c0a:	07ca      	lsls	r2, r1, #31
 8000c0c:	d447      	bmi.n	8000c9e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c0e:	4a4d      	ldr	r2, [pc, #308]	; (8000d44 <HAL_RCC_ClockConfig+0x154>)
 8000c10:	6813      	ldr	r3, [r2, #0]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	429e      	cmp	r6, r3
 8000c18:	f0c0 8082 	bcc.w	8000d20 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c1c:	682a      	ldr	r2, [r5, #0]
 8000c1e:	4c4a      	ldr	r4, [pc, #296]	; (8000d48 <HAL_RCC_ClockConfig+0x158>)
 8000c20:	f012 0f04 	tst.w	r2, #4
 8000c24:	f040 8087 	bne.w	8000d36 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c28:	0713      	lsls	r3, r2, #28
 8000c2a:	d506      	bpl.n	8000c3a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c2c:	6863      	ldr	r3, [r4, #4]
 8000c2e:	692a      	ldr	r2, [r5, #16]
 8000c30:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c34:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c38:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c3a:	f7ff ff9d 	bl	8000b78 <HAL_RCC_GetSysClockFreq>
 8000c3e:	6863      	ldr	r3, [r4, #4]
 8000c40:	4a42      	ldr	r2, [pc, #264]	; (8000d4c <HAL_RCC_ClockConfig+0x15c>)
 8000c42:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c46:	5cd3      	ldrb	r3, [r2, r3]
 8000c48:	40d8      	lsrs	r0, r3
 8000c4a:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <HAL_RCC_ClockConfig+0x160>)
 8000c4c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fa7c 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000c54:	2000      	movs	r0, #0
}
 8000c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c5a:	6813      	ldr	r3, [r2, #0]
 8000c5c:	f023 0307 	bic.w	r3, r3, #7
 8000c60:	430b      	orrs	r3, r1
 8000c62:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c64:	6813      	ldr	r3, [r2, #0]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d0ca      	beq.n	8000c04 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000c6e:	2001      	movs	r0, #1
 8000c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c74:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c76:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c7a:	bf1e      	ittt	ne
 8000c7c:	685a      	ldrne	r2, [r3, #4]
 8000c7e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000c82:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c84:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c86:	bf42      	ittt	mi
 8000c88:	685a      	ldrmi	r2, [r3, #4]
 8000c8a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000c8e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	68a8      	ldr	r0, [r5, #8]
 8000c94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c98:	4302      	orrs	r2, r0
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	e7b5      	b.n	8000c0a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c9e:	686a      	ldr	r2, [r5, #4]
 8000ca0:	4c29      	ldr	r4, [pc, #164]	; (8000d48 <HAL_RCC_ClockConfig+0x158>)
 8000ca2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ca6:	d11c      	bne.n	8000ce2 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cac:	d0df      	beq.n	8000c6e <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cae:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cb0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cb4:	f023 0303 	bic.w	r3, r3, #3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000cbc:	f7ff fa88 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc0:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000cc2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d114      	bne.n	8000cf2 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc8:	6863      	ldr	r3, [r4, #4]
 8000cca:	f003 030c 	and.w	r3, r3, #12
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	d09d      	beq.n	8000c0e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cd2:	f7ff fa7d 	bl	80001d0 <HAL_GetTick>
 8000cd6:	1bc0      	subs	r0, r0, r7
 8000cd8:	4540      	cmp	r0, r8
 8000cda:	d9f5      	bls.n	8000cc8 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000cdc:	2003      	movs	r0, #3
 8000cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ce2:	2a02      	cmp	r2, #2
 8000ce4:	d102      	bne.n	8000cec <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ce6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cea:	e7df      	b.n	8000cac <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cec:	f013 0f02 	tst.w	r3, #2
 8000cf0:	e7dc      	b.n	8000cac <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d10f      	bne.n	8000d16 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cf6:	6863      	ldr	r3, [r4, #4]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d086      	beq.n	8000c0e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d00:	f7ff fa66 	bl	80001d0 <HAL_GetTick>
 8000d04:	1bc0      	subs	r0, r0, r7
 8000d06:	4540      	cmp	r0, r8
 8000d08:	d9f5      	bls.n	8000cf6 <HAL_RCC_ClockConfig+0x106>
 8000d0a:	e7e7      	b.n	8000cdc <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d0c:	f7ff fa60 	bl	80001d0 <HAL_GetTick>
 8000d10:	1bc0      	subs	r0, r0, r7
 8000d12:	4540      	cmp	r0, r8
 8000d14:	d8e2      	bhi.n	8000cdc <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d16:	6863      	ldr	r3, [r4, #4]
 8000d18:	f013 0f0c 	tst.w	r3, #12
 8000d1c:	d1f6      	bne.n	8000d0c <HAL_RCC_ClockConfig+0x11c>
 8000d1e:	e776      	b.n	8000c0e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d20:	6813      	ldr	r3, [r2, #0]
 8000d22:	f023 0307 	bic.w	r3, r3, #7
 8000d26:	4333      	orrs	r3, r6
 8000d28:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d2a:	6813      	ldr	r3, [r2, #0]
 8000d2c:	f003 0307 	and.w	r3, r3, #7
 8000d30:	429e      	cmp	r6, r3
 8000d32:	d19c      	bne.n	8000c6e <HAL_RCC_ClockConfig+0x7e>
 8000d34:	e772      	b.n	8000c1c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d36:	6863      	ldr	r3, [r4, #4]
 8000d38:	68e9      	ldr	r1, [r5, #12]
 8000d3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d3e:	430b      	orrs	r3, r1
 8000d40:	6063      	str	r3, [r4, #4]
 8000d42:	e771      	b.n	8000c28 <HAL_RCC_ClockConfig+0x38>
 8000d44:	40022000 	.word	0x40022000
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	08001644 	.word	0x08001644
 8000d50:	20000008 	.word	0x20000008

08000d54 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d62:	6810      	ldr	r0, [r2, #0]
}    
 8000d64:	40d8      	lsrs	r0, r3
 8000d66:	4770      	bx	lr
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	08001654 	.word	0x08001654
 8000d70:	20000008 	.word	0x20000008

08000d74 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000d7e:	5cd3      	ldrb	r3, [r2, r3]
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d82:	6810      	ldr	r0, [r2, #0]
} 
 8000d84:	40d8      	lsrs	r0, r3
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	08001654 	.word	0x08001654
 8000d90:	20000008 	.word	0x20000008

08000d94 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000d94:	6803      	ldr	r3, [r0, #0]
{
 8000d96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000d9a:	07d9      	lsls	r1, r3, #31
{
 8000d9c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000d9e:	d520      	bpl.n	8000de2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000da0:	4c35      	ldr	r4, [pc, #212]	; (8000e78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000da2:	69e3      	ldr	r3, [r4, #28]
 8000da4:	00da      	lsls	r2, r3, #3
 8000da6:	d432      	bmi.n	8000e0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000da8:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	69e3      	ldr	r3, [r4, #28]
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	61e3      	str	r3, [r4, #28]
 8000db2:	69e3      	ldr	r3, [r4, #28]
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dbc:	4e2f      	ldr	r6, [pc, #188]	; (8000e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000dbe:	6833      	ldr	r3, [r6, #0]
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	d526      	bpl.n	8000e12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000dc4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000dc6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000dca:	d136      	bne.n	8000e3a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000dcc:	6a23      	ldr	r3, [r4, #32]
 8000dce:	686a      	ldr	r2, [r5, #4]
 8000dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000dd8:	b11f      	cbz	r7, 8000de2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dda:	69e3      	ldr	r3, [r4, #28]
 8000ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000de0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000de2:	6828      	ldr	r0, [r5, #0]
 8000de4:	0783      	lsls	r3, r0, #30
 8000de6:	d506      	bpl.n	8000df6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000de8:	4a23      	ldr	r2, [pc, #140]	; (8000e78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000dea:	68a9      	ldr	r1, [r5, #8]
 8000dec:	6853      	ldr	r3, [r2, #4]
 8000dee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000df2:	430b      	orrs	r3, r1
 8000df4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000df6:	f010 0010 	ands.w	r0, r0, #16
 8000dfa:	d01b      	beq.n	8000e34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000dfe:	68e9      	ldr	r1, [r5, #12]
 8000e00:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000e02:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000e04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	6053      	str	r3, [r2, #4]
 8000e0c:	e012      	b.n	8000e34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000e0e:	2700      	movs	r7, #0
 8000e10:	e7d4      	b.n	8000dbc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e12:	6833      	ldr	r3, [r6, #0]
 8000e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e18:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e1a:	f7ff f9d9 	bl	80001d0 <HAL_GetTick>
 8000e1e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e20:	6833      	ldr	r3, [r6, #0]
 8000e22:	05d8      	lsls	r0, r3, #23
 8000e24:	d4ce      	bmi.n	8000dc4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e26:	f7ff f9d3 	bl	80001d0 <HAL_GetTick>
 8000e2a:	eba0 0008 	sub.w	r0, r0, r8
 8000e2e:	2864      	cmp	r0, #100	; 0x64
 8000e30:	d9f6      	bls.n	8000e20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000e32:	2003      	movs	r0, #3
}
 8000e34:	b002      	add	sp, #8
 8000e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e3a:	686a      	ldr	r2, [r5, #4]
 8000e3c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d0c3      	beq.n	8000dcc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e44:	2001      	movs	r0, #1
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e48:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e4a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e4c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e52:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000e54:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e56:	07d9      	lsls	r1, r3, #31
 8000e58:	d5b8      	bpl.n	8000dcc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000e5a:	f7ff f9b9 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e5e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000e62:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e64:	6a23      	ldr	r3, [r4, #32]
 8000e66:	079a      	lsls	r2, r3, #30
 8000e68:	d4b0      	bmi.n	8000dcc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff f9b1 	bl	80001d0 <HAL_GetTick>
 8000e6e:	1b80      	subs	r0, r0, r6
 8000e70:	4540      	cmp	r0, r8
 8000e72:	d9f7      	bls.n	8000e64 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000e74:	e7dd      	b.n	8000e32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40007000 	.word	0x40007000
 8000e80:	42420440 	.word	0x42420440

08000e84 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000e84:	6803      	ldr	r3, [r0, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000e8c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e8e:	695a      	ldr	r2, [r3, #20]
 8000e90:	f022 0201 	bic.w	r2, r2, #1
 8000e94:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000e96:	2320      	movs	r3, #32
 8000e98:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000e9c:	4770      	bx	lr
	...

08000ea0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ea4:	6805      	ldr	r5, [r0, #0]
 8000ea6:	68c2      	ldr	r2, [r0, #12]
 8000ea8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000eaa:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000eac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000eb4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000eb6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000ebc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000ec0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ec4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000eca:	696b      	ldr	r3, [r5, #20]
 8000ecc:	6982      	ldr	r2, [r0, #24]
 8000ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000ed6:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <UART_SetConfig+0x138>)
{
 8000ed8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000eda:	429d      	cmp	r5, r3
 8000edc:	f04f 0419 	mov.w	r4, #25
 8000ee0:	d146      	bne.n	8000f70 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ee2:	f7ff ff47 	bl	8000d74 <HAL_RCC_GetPCLK2Freq>
 8000ee6:	fb04 f300 	mul.w	r3, r4, r0
 8000eea:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000eee:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ef2:	00b6      	lsls	r6, r6, #2
 8000ef4:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ef8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000efc:	011e      	lsls	r6, r3, #4
 8000efe:	f7ff ff39 	bl	8000d74 <HAL_RCC_GetPCLK2Freq>
 8000f02:	4360      	muls	r0, r4
 8000f04:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f0e:	f7ff ff31 	bl	8000d74 <HAL_RCC_GetPCLK2Freq>
 8000f12:	4360      	muls	r0, r4
 8000f14:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f1e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f22:	fb08 7313 	mls	r3, r8, r3, r7
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	3332      	adds	r3, #50	; 0x32
 8000f2a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f2e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000f32:	f7ff ff1f 	bl	8000d74 <HAL_RCC_GetPCLK2Freq>
 8000f36:	4360      	muls	r0, r4
 8000f38:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000f3c:	0092      	lsls	r2, r2, #2
 8000f3e:	fbb0 faf2 	udiv	sl, r0, r2
 8000f42:	f7ff ff17 	bl	8000d74 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f46:	4360      	muls	r0, r4
 8000f48:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f52:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f56:	fb08 a313 	mls	r3, r8, r3, sl
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	3332      	adds	r3, #50	; 0x32
 8000f5e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	433b      	orrs	r3, r7
 8000f68:	4433      	add	r3, r6
 8000f6a:	60ab      	str	r3, [r5, #8]
 8000f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f70:	f7ff fef0 	bl	8000d54 <HAL_RCC_GetPCLK1Freq>
 8000f74:	fb04 f300 	mul.w	r3, r4, r0
 8000f78:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000f7c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000f80:	00b6      	lsls	r6, r6, #2
 8000f82:	fbb3 f3f6 	udiv	r3, r3, r6
 8000f86:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f8a:	011e      	lsls	r6, r3, #4
 8000f8c:	f7ff fee2 	bl	8000d54 <HAL_RCC_GetPCLK1Freq>
 8000f90:	4360      	muls	r0, r4
 8000f92:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f9c:	f7ff feda 	bl	8000d54 <HAL_RCC_GetPCLK1Freq>
 8000fa0:	4360      	muls	r0, r4
 8000fa2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fac:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fb0:	fb08 7313 	mls	r3, r8, r3, r7
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	3332      	adds	r3, #50	; 0x32
 8000fb8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fbc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000fc0:	f7ff fec8 	bl	8000d54 <HAL_RCC_GetPCLK1Freq>
 8000fc4:	4360      	muls	r0, r4
 8000fc6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	fbb0 faf2 	udiv	sl, r0, r2
 8000fd0:	f7ff fec0 	bl	8000d54 <HAL_RCC_GetPCLK1Freq>
 8000fd4:	e7b7      	b.n	8000f46 <UART_SetConfig+0xa6>
 8000fd6:	bf00      	nop
 8000fd8:	40013800 	.word	0x40013800

08000fdc <HAL_UART_Init>:
{
 8000fdc:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000fde:	4604      	mov	r4, r0
 8000fe0:	b340      	cbz	r0, 8001034 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000fe2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000fe6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fea:	b91b      	cbnz	r3, 8000ff4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000fec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000ff0:	f000 fa38 	bl	8001464 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000ff4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000ff6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000ff8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000ffc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000ffe:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001004:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001006:	f7ff ff4b 	bl	8000ea0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800100a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800100c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001016:	695a      	ldr	r2, [r3, #20]
 8001018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800101c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001024:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001026:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001028:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800102a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800102e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001032:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001034:	2001      	movs	r0, #1
}
 8001036:	bd10      	pop	{r4, pc}

08001038 <HAL_UART_TxCpltCallback>:
 8001038:	4770      	bx	lr

0800103a <HAL_UART_RxCpltCallback>:
 800103a:	4770      	bx	lr

0800103c <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800103c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001040:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001042:	2b22      	cmp	r3, #34	; 0x22
 8001044:	d136      	bne.n	80010b4 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001046:	6883      	ldr	r3, [r0, #8]
 8001048:	6901      	ldr	r1, [r0, #16]
 800104a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800104e:	6802      	ldr	r2, [r0, #0]
 8001050:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001052:	d123      	bne.n	800109c <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001054:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001056:	b9e9      	cbnz	r1, 8001094 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800105c:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001060:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001062:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001064:	3c01      	subs	r4, #1
 8001066:	b2a4      	uxth	r4, r4
 8001068:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800106a:	b98c      	cbnz	r4, 8001090 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800106c:	6803      	ldr	r3, [r0, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	f022 0220 	bic.w	r2, r2, #32
 8001074:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800107c:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800107e:	695a      	ldr	r2, [r3, #20]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001086:	2320      	movs	r3, #32
 8001088:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800108c:	f7ff ffd5 	bl	800103a <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001090:	2000      	movs	r0, #0
}
 8001092:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	f823 2b01 	strh.w	r2, [r3], #1
 800109a:	e7e1      	b.n	8001060 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800109c:	b921      	cbnz	r1, 80010a8 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800109e:	1c59      	adds	r1, r3, #1
 80010a0:	6852      	ldr	r2, [r2, #4]
 80010a2:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e7dc      	b.n	8001062 <UART_Receive_IT+0x26>
 80010a8:	6852      	ldr	r2, [r2, #4]
 80010aa:	1c59      	adds	r1, r3, #1
 80010ac:	6281      	str	r1, [r0, #40]	; 0x28
 80010ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010b2:	e7f7      	b.n	80010a4 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80010b4:	2002      	movs	r0, #2
 80010b6:	bd10      	pop	{r4, pc}

080010b8 <HAL_UART_ErrorCallback>:
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010bc:	6803      	ldr	r3, [r0, #0]
{
 80010be:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010c0:	681a      	ldr	r2, [r3, #0]
{
 80010c2:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80010c4:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80010c6:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80010c8:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80010ca:	d107      	bne.n	80010dc <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010cc:	0696      	lsls	r6, r2, #26
 80010ce:	d55a      	bpl.n	8001186 <HAL_UART_IRQHandler+0xca>
 80010d0:	068d      	lsls	r5, r1, #26
 80010d2:	d558      	bpl.n	8001186 <HAL_UART_IRQHandler+0xca>
}
 80010d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80010d8:	f7ff bfb0 	b.w	800103c <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80010dc:	f015 0501 	ands.w	r5, r5, #1
 80010e0:	d102      	bne.n	80010e8 <HAL_UART_IRQHandler+0x2c>
 80010e2:	f411 7f90 	tst.w	r1, #288	; 0x120
 80010e6:	d04e      	beq.n	8001186 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80010e8:	07d3      	lsls	r3, r2, #31
 80010ea:	d505      	bpl.n	80010f8 <HAL_UART_IRQHandler+0x3c>
 80010ec:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80010ee:	bf42      	ittt	mi
 80010f0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80010f2:	f043 0301 	orrmi.w	r3, r3, #1
 80010f6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80010f8:	0750      	lsls	r0, r2, #29
 80010fa:	d504      	bpl.n	8001106 <HAL_UART_IRQHandler+0x4a>
 80010fc:	b11d      	cbz	r5, 8001106 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80010fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001106:	0793      	lsls	r3, r2, #30
 8001108:	d504      	bpl.n	8001114 <HAL_UART_IRQHandler+0x58>
 800110a:	b11d      	cbz	r5, 8001114 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800110c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001114:	0716      	lsls	r6, r2, #28
 8001116:	d504      	bpl.n	8001122 <HAL_UART_IRQHandler+0x66>
 8001118:	b11d      	cbz	r5, 8001122 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800111a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800111c:	f043 0308 	orr.w	r3, r3, #8
 8001120:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001122:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001124:	2b00      	cmp	r3, #0
 8001126:	d066      	beq.n	80011f6 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001128:	0695      	lsls	r5, r2, #26
 800112a:	d504      	bpl.n	8001136 <HAL_UART_IRQHandler+0x7a>
 800112c:	0688      	lsls	r0, r1, #26
 800112e:	d502      	bpl.n	8001136 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001130:	4620      	mov	r0, r4
 8001132:	f7ff ff83 	bl	800103c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001136:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001138:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800113a:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800113c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800113e:	0711      	lsls	r1, r2, #28
 8001140:	d402      	bmi.n	8001148 <HAL_UART_IRQHandler+0x8c>
 8001142:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001146:	d01a      	beq.n	800117e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001148:	f7ff fe9c 	bl	8000e84 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	695a      	ldr	r2, [r3, #20]
 8001150:	0652      	lsls	r2, r2, #25
 8001152:	d510      	bpl.n	8001176 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001154:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001156:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800115c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800115e:	b150      	cbz	r0, 8001176 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <HAL_UART_IRQHandler+0x13c>)
 8001162:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001164:	f7ff fa42 	bl	80005ec <HAL_DMA_Abort_IT>
 8001168:	2800      	cmp	r0, #0
 800116a:	d044      	beq.n	80011f6 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800116c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800116e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001172:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001174:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001176:	4620      	mov	r0, r4
 8001178:	f7ff ff9e 	bl	80010b8 <HAL_UART_ErrorCallback>
 800117c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800117e:	f7ff ff9b 	bl	80010b8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001182:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001184:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001186:	0616      	lsls	r6, r2, #24
 8001188:	d527      	bpl.n	80011da <HAL_UART_IRQHandler+0x11e>
 800118a:	060d      	lsls	r5, r1, #24
 800118c:	d525      	bpl.n	80011da <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800118e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001192:	2a21      	cmp	r2, #33	; 0x21
 8001194:	d12f      	bne.n	80011f6 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001196:	68a2      	ldr	r2, [r4, #8]
 8001198:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800119c:	6a22      	ldr	r2, [r4, #32]
 800119e:	d117      	bne.n	80011d0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80011a0:	8811      	ldrh	r1, [r2, #0]
 80011a2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80011a6:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80011a8:	6921      	ldr	r1, [r4, #16]
 80011aa:	b979      	cbnz	r1, 80011cc <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80011ac:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80011ae:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80011b0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80011b2:	3a01      	subs	r2, #1
 80011b4:	b292      	uxth	r2, r2
 80011b6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80011b8:	b9ea      	cbnz	r2, 80011f6 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011c0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80011cc:	3201      	adds	r2, #1
 80011ce:	e7ee      	b.n	80011ae <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80011d0:	1c51      	adds	r1, r2, #1
 80011d2:	6221      	str	r1, [r4, #32]
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	e7ea      	b.n	80011b0 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80011da:	0650      	lsls	r0, r2, #25
 80011dc:	d50b      	bpl.n	80011f6 <HAL_UART_IRQHandler+0x13a>
 80011de:	064a      	lsls	r2, r1, #25
 80011e0:	d509      	bpl.n	80011f6 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80011e2:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80011e4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80011e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011ea:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80011ec:	2320      	movs	r3, #32
 80011ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80011f2:	f7ff ff21 	bl	8001038 <HAL_UART_TxCpltCallback>
 80011f6:	bd70      	pop	{r4, r5, r6, pc}
 80011f8:	080011fd 	.word	0x080011fd

080011fc <UART_DMAAbortOnError>:
{
 80011fc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80011fe:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001200:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001202:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001204:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001206:	f7ff ff57 	bl	80010b8 <HAL_UART_ErrorCallback>
 800120a:	bd08      	pop	{r3, pc}

0800120c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120c:	2228      	movs	r2, #40	; 0x28
{
 800120e:	b510      	push	{r4, lr}
 8001210:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	eb0d 0002 	add.w	r0, sp, r2
 8001216:	2100      	movs	r1, #0
 8001218:	f000 f9f8 	bl	800160c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	2214      	movs	r2, #20
 800121e:	2100      	movs	r1, #0
 8001220:	eb0d 0002 	add.w	r0, sp, r2
 8001224:	f000 f9f2 	bl	800160c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001228:	2100      	movs	r1, #0
 800122a:	2210      	movs	r2, #16
 800122c:	a801      	add	r0, sp, #4
 800122e:	f000 f9ed 	bl	800160c <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001236:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001238:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800123e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001244:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001246:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001248:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124c:	f7ff fb08 	bl	8000860 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001252:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800125a:	4621      	mov	r1, r4
 800125c:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001260:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001264:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001266:	f7ff fcc3 	bl	8000bf0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800126a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001270:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001272:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001274:	f7ff fd8e 	bl	8000d94 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001278:	b014      	add	sp, #80	; 0x50
 800127a:	bd10      	pop	{r4, pc}

0800127c <main>:
{
 800127c:	b500      	push	{lr}
 800127e:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001280:	f7fe ff88 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001284:	f7ff ffc2 	bl	800120c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	2210      	movs	r2, #16
 800128a:	2100      	movs	r1, #0
 800128c:	eb0d 0002 	add.w	r0, sp, r2
 8001290:	f000 f9bc 	bl	800160c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001294:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <main+0x118>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13 
 8001296:	f24f 6161 	movw	r1, #63073	; 0xf661
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13 
 800129c:	483e      	ldr	r0, [pc, #248]	; (8001398 <main+0x11c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	f042 0220 	orr.w	r2, r2, #32
 80012a2:	619a      	str	r2, [r3, #24]
 80012a4:	699a      	ldr	r2, [r3, #24]
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a8:	f002 0220 	and.w	r2, r2, #32
 80012ac:	9201      	str	r2, [sp, #4]
 80012ae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	699a      	ldr	r2, [r3, #24]
                           PB14 PB15 PB5 PB6 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	f042 0204 	orr.w	r2, r2, #4
 80012b8:	619a      	str	r2, [r3, #24]
 80012ba:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2502      	movs	r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	f002 0204 	and.w	r2, r2, #4
 80012c2:	9202      	str	r2, [sp, #8]
 80012c4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	699a      	ldr	r2, [r3, #24]
 80012c8:	f042 0208 	orr.w	r2, r2, #8
 80012cc:	619a      	str	r2, [r3, #24]
 80012ce:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13 
 80012d0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	9303      	str	r3, [sp, #12]
 80012d8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13 
 80012da:	f7ff faaf 	bl	800083c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80012de:	230e      	movs	r3, #14
 80012e0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <main+0x120>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	a904      	add	r1, sp, #16
 80012e6:	482e      	ldr	r0, [pc, #184]	; (80013a0 <main+0x124>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f7ff f9c6 	bl	800067c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13 
 80012f0:	f24f 6361 	movw	r3, #63073	; 0xf661
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	a904      	add	r1, sp, #16
 80012f6:	4828      	ldr	r0, [pc, #160]	; (8001398 <main+0x11c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13 
 80012f8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f7ff f9bc 	bl	800067c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	a904      	add	r1, sp, #16
 8001306:	4824      	ldr	r0, [pc, #144]	; (8001398 <main+0x11c>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001308:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	9405      	str	r4, [sp, #20]
  hadc1.Instance = ADC1;
 800130c:	4d25      	ldr	r5, [pc, #148]	; (80013a4 <main+0x128>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f7ff f9b4 	bl	800067c <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <main+0x12c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001316:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8001318:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800131a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800131e:	9404      	str	r4, [sp, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001320:	61eb      	str	r3, [r5, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001322:	9405      	str	r4, [sp, #20]
 8001324:	9406      	str	r4, [sp, #24]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001326:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001328:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800132a:	616c      	str	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132c:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 800132e:	612e      	str	r6, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001330:	f7ff f872 	bl	8000418 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	a904      	add	r1, sp, #16
 8001336:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_0;
 8001338:	9404      	str	r4, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800133a:	9605      	str	r6, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800133c:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133e:	f7fe ffc5 	bl	80002cc <HAL_ADC_ConfigChannel>
  huart1.Init.BaudRate = 9600;
 8001342:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 8001346:	4819      	ldr	r0, [pc, #100]	; (80013ac <main+0x130>)
  huart1.Init.BaudRate = 9600;
 8001348:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <main+0x134>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 9600;
 800134c:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001350:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001352:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001354:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001356:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001358:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800135a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800135c:	f7ff fe3e 	bl	8000fdc <HAL_UART_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001360:	4622      	mov	r2, r4
 8001362:	4621      	mov	r1, r4
 8001364:	2007      	movs	r0, #7
 8001366:	f7ff f8eb 	bl	8000540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800136a:	2007      	movs	r0, #7
 800136c:	f7ff f91c 	bl	80005a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001370:	4622      	mov	r2, r4
 8001372:	4621      	mov	r1, r4
 8001374:	2009      	movs	r0, #9
 8001376:	f7ff f8e3 	bl	8000540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800137a:	2009      	movs	r0, #9
 800137c:	f7ff f914 	bl	80005a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001380:	2008      	movs	r0, #8
 8001382:	4622      	mov	r2, r4
 8001384:	4621      	mov	r1, r4
 8001386:	f7ff f8db 	bl	8000540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800138a:	2008      	movs	r0, #8
 800138c:	f7ff f90c 	bl	80005a8 <HAL_NVIC_EnableIRQ>
 8001390:	e7fe      	b.n	8001390 <main+0x114>
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	40010c00 	.word	0x40010c00
 800139c:	10210000 	.word	0x10210000
 80013a0:	40010800 	.word	0x40010800
 80013a4:	2000002c 	.word	0x2000002c
 80013a8:	40012400 	.word	0x40012400
 80013ac:	2000005c 	.word	0x2000005c
 80013b0:	40013800 	.word	0x40013800

080013b4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_MspInit+0x3c>)
{
 80013b6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80013b8:	699a      	ldr	r2, [r3, #24]
 80013ba:	f042 0201 	orr.w	r2, r2, #1
 80013be:	619a      	str	r2, [r3, #24]
 80013c0:	699a      	ldr	r2, [r3, #24]
 80013c2:	f002 0201 	and.w	r2, r2, #1
 80013c6:	9200      	str	r2, [sp, #0]
 80013c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	69da      	ldr	r2, [r3, #28]
 80013cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013d0:	61da      	str	r2, [r3, #28]
 80013d2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013de:	6853      	ldr	r3, [r2, #4]
 80013e0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	b002      	add	sp, #8
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000

080013f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f8:	b510      	push	{r4, lr}
 80013fa:	4604      	mov	r4, r0
 80013fc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	2210      	movs	r2, #16
 8001400:	2100      	movs	r1, #0
 8001402:	a802      	add	r0, sp, #8
 8001404:	f000 f902 	bl	800160c <memset>
  if(hadc->Instance==ADC1)
 8001408:	6822      	ldr	r2, [r4, #0]
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_ADC_MspInit+0x64>)
 800140c:	429a      	cmp	r2, r3
 800140e:	d123      	bne.n	8001458 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001410:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001414:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800141c:	619a      	str	r2, [r3, #24]
 800141e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	480f      	ldr	r0, [pc, #60]	; (8001460 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001422:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	699a      	ldr	r2, [r3, #24]
 800142c:	f042 0204 	orr.w	r2, r2, #4
 8001430:	619a      	str	r2, [r3, #24]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800143c:	2301      	movs	r3, #1
 800143e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001440:	2303      	movs	r3, #3
 8001442:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f7ff f91a 	bl	800067c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2012      	movs	r0, #18
 800144c:	4611      	mov	r1, r2
 800144e:	f7ff f877 	bl	8000540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001452:	2012      	movs	r0, #18
 8001454:	f7ff f8a8 	bl	80005a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001458:	b006      	add	sp, #24
 800145a:	bd10      	pop	{r4, pc}
 800145c:	40012400 	.word	0x40012400
 8001460:	40010800 	.word	0x40010800

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b510      	push	{r4, lr}
 8001466:	4604      	mov	r4, r0
 8001468:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	2210      	movs	r2, #16
 800146c:	2100      	movs	r1, #0
 800146e:	a802      	add	r0, sp, #8
 8001470:	f000 f8cc 	bl	800160c <memset>
  if(huart->Instance==USART1)
 8001474:	6822      	ldr	r2, [r4, #0]
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_UART_MspInit+0x80>)
 8001478:	429a      	cmp	r2, r3
 800147a:	d130      	bne.n	80014de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800147c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001480:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001488:	619a      	str	r2, [r3, #24]
 800148a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	4816      	ldr	r0, [pc, #88]	; (80014e8 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800148e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001492:	9200      	str	r2, [sp, #0]
 8001494:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001498:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	f042 0204 	orr.w	r2, r2, #4
 800149e:	619a      	str	r2, [r3, #24]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f7ff f8e0 	bl	800067c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	a902      	add	r1, sp, #8
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014c4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f7ff f8d7 	bl	800067c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014ce:	2025      	movs	r0, #37	; 0x25
 80014d0:	4622      	mov	r2, r4
 80014d2:	4621      	mov	r1, r4
 80014d4:	f7ff f834 	bl	8000540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014d8:	2025      	movs	r0, #37	; 0x25
 80014da:	f7ff f865 	bl	80005a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014de:	b006      	add	sp, #24
 80014e0:	bd10      	pop	{r4, pc}
 80014e2:	bf00      	nop
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40010800 	.word	0x40010800

080014ec <NMI_Handler>:
 80014ec:	4770      	bx	lr

080014ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	e7fe      	b.n	80014f0 <MemManage_Handler>

080014f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler>

080014f6 <SVC_Handler>:
 80014f6:	4770      	bx	lr

080014f8 <DebugMon_Handler>:
 80014f8:	4770      	bx	lr

080014fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f7fe be5c 	b.w	80001b8 <HAL_IncTick>

08001500 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001500:	2002      	movs	r0, #2
 8001502:	f7ff b9a1 	b.w	8000848 <HAL_GPIO_EXTI_IRQHandler>

08001506 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001506:	2004      	movs	r0, #4
 8001508:	f7ff b99e 	b.w	8000848 <HAL_GPIO_EXTI_IRQHandler>

0800150c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800150c:	2008      	movs	r0, #8
 800150e:	f7ff b99b 	b.w	8000848 <HAL_GPIO_EXTI_IRQHandler>
	...

08001514 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001514:	4801      	ldr	r0, [pc, #4]	; (800151c <ADC1_2_IRQHandler+0x8>)
 8001516:	f7fe be63 	b.w	80001e0 <HAL_ADC_IRQHandler>
 800151a:	bf00      	nop
 800151c:	2000002c 	.word	0x2000002c

08001520 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001520:	4801      	ldr	r0, [pc, #4]	; (8001528 <USART1_IRQHandler+0x8>)
 8001522:	f7ff bdcb 	b.w	80010bc <HAL_UART_IRQHandler>
 8001526:	bf00      	nop
 8001528:	2000005c 	.word	0x2000005c

0800152c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <SystemInit+0x40>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	f042 0201 	orr.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <SystemInit+0x44>)
 800153a:	400a      	ands	r2, r1
 800153c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001544:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001548:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001550:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001558:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800155a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800155e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001560:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <SystemInit+0x48>)
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	f8ff0000 	.word	0xf8ff0000
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001578:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800157a:	e003      	b.n	8001584 <LoopCopyDataInit>

0800157c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800157e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001580:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001582:	3104      	adds	r1, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001584:	480a      	ldr	r0, [pc, #40]	; (80015b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001588:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800158a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800158c:	d3f6      	bcc.n	800157c <CopyDataInit>
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001590:	e002      	b.n	8001598 <LoopFillZerobss>

08001592 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001594:	f842 3b04 	str.w	r3, [r2], #4

08001598 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800159a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800159c:	d3f9      	bcc.n	8001592 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800159e:	f7ff ffc5 	bl	800152c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a2:	f000 f80f 	bl	80015c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015a6:	f7ff fe69 	bl	800127c <main>
  bx lr
 80015aa:	4770      	bx	lr
  ldr r3, =_sidata
 80015ac:	08001664 	.word	0x08001664
  ldr r0, =_sdata
 80015b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80015b8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80015bc:	2000009c 	.word	0x2000009c

080015c0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <CAN1_RX1_IRQHandler>
	...

080015c4 <__libc_init_array>:
 80015c4:	b570      	push	{r4, r5, r6, lr}
 80015c6:	2500      	movs	r5, #0
 80015c8:	4e0c      	ldr	r6, [pc, #48]	; (80015fc <__libc_init_array+0x38>)
 80015ca:	4c0d      	ldr	r4, [pc, #52]	; (8001600 <__libc_init_array+0x3c>)
 80015cc:	1ba4      	subs	r4, r4, r6
 80015ce:	10a4      	asrs	r4, r4, #2
 80015d0:	42a5      	cmp	r5, r4
 80015d2:	d109      	bne.n	80015e8 <__libc_init_array+0x24>
 80015d4:	f000 f822 	bl	800161c <_init>
 80015d8:	2500      	movs	r5, #0
 80015da:	4e0a      	ldr	r6, [pc, #40]	; (8001604 <__libc_init_array+0x40>)
 80015dc:	4c0a      	ldr	r4, [pc, #40]	; (8001608 <__libc_init_array+0x44>)
 80015de:	1ba4      	subs	r4, r4, r6
 80015e0:	10a4      	asrs	r4, r4, #2
 80015e2:	42a5      	cmp	r5, r4
 80015e4:	d105      	bne.n	80015f2 <__libc_init_array+0x2e>
 80015e6:	bd70      	pop	{r4, r5, r6, pc}
 80015e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015ec:	4798      	blx	r3
 80015ee:	3501      	adds	r5, #1
 80015f0:	e7ee      	b.n	80015d0 <__libc_init_array+0xc>
 80015f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015f6:	4798      	blx	r3
 80015f8:	3501      	adds	r5, #1
 80015fa:	e7f2      	b.n	80015e2 <__libc_init_array+0x1e>
 80015fc:	0800165c 	.word	0x0800165c
 8001600:	0800165c 	.word	0x0800165c
 8001604:	0800165c 	.word	0x0800165c
 8001608:	08001660 	.word	0x08001660

0800160c <memset>:
 800160c:	4603      	mov	r3, r0
 800160e:	4402      	add	r2, r0
 8001610:	4293      	cmp	r3, r2
 8001612:	d100      	bne.n	8001616 <memset+0xa>
 8001614:	4770      	bx	lr
 8001616:	f803 1b01 	strb.w	r1, [r3], #1
 800161a:	e7f9      	b.n	8001610 <memset+0x4>

0800161c <_init>:
 800161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161e:	bf00      	nop
 8001620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001622:	bc08      	pop	{r3}
 8001624:	469e      	mov	lr, r3
 8001626:	4770      	bx	lr

08001628 <_fini>:
 8001628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162a:	bf00      	nop
 800162c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800162e:	bc08      	pop	{r3}
 8001630:	469e      	mov	lr, r3
 8001632:	4770      	bx	lr
